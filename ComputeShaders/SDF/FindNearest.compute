#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"

#pragma kernel CSMain

Texture2D<float4> _PreviousBuffer;
RWTexture2D<float4> _CurrentBuffer;

uint _Width;
uint _Height;

uint _IterationTime;
uint _Iteration;

int DistanceSquared(uint2 a, uint2 b)
{
    int dx = a.x - b.x;
    int dy = a.y - b.y;
    return dx * dx + dy * dy;
}

[numthreads(8,8,1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint2 currentCoord = id.xy;

    if (_PreviousBuffer[currentCoord].z > 0.5)
    {
        _CurrentBuffer[currentCoord] = _PreviousBuffer[currentCoord];
        return;
    }

    bool found = false;
    int minDistance = int(_Width * _Width + _Height * _Height); // 初始化为最大可能距离
    uint2 currentSeed = currentCoord;

    // 按回字形向外遍历
    int maxRadius = max(max(int(_Width - id.x - 1), int(id.x)), max(int(_Height - id.y - 1), int(id.y)));
    for (int radius = 1; radius <= maxRadius; radius++)
    {
        if (minDistance < radius * radius) break;
        // 遍历上边界
        for (int i = -radius; i <= radius; i++)
        {
            int2 neighborCoordSigned = int2(currentCoord) + int2(i, -radius);
            if (neighborCoordSigned.x < 0 || neighborCoordSigned.x >= int(_Width) || neighborCoordSigned.y < 0 || neighborCoordSigned.y >= int(_Height)) continue;

            uint2 neighborCoord = uint2(neighborCoordSigned);
            if (_PreviousBuffer[neighborCoord].z < 0.5) continue;

            int distance = DistanceSquared(neighborCoord, currentCoord);
            if (distance < minDistance)
            {
                minDistance = distance;
                currentSeed = neighborCoord;
                found = true;
            }
        }

        // 遍历下边界
        for (int i = -radius; i <= radius; i++)
        {
            int2 neighborCoordSigned = int2(currentCoord) + int2(i, radius);
            if (neighborCoordSigned.x < 0 || neighborCoordSigned.x >= int(_Width) || neighborCoordSigned.y < 0 || neighborCoordSigned.y >= int(_Height)) continue;

            uint2 neighborCoord = uint2(neighborCoordSigned);
            if (_PreviousBuffer[neighborCoord].z < 0.5) continue;

            int distance = DistanceSquared(neighborCoord, currentCoord);
            if (distance < minDistance)
            {
                minDistance = distance;
                currentSeed = neighborCoord;
                found = true;
            }
        }

        // 遍历左边界
        for (int j = -radius + 1; j <= radius - 1; j++)
        {
            int2 neighborCoordSigned = int2(currentCoord) + int2(-radius, j);
            if (neighborCoordSigned.x < 0 || neighborCoordSigned.x >= int(_Width) || neighborCoordSigned.y < 0 || neighborCoordSigned.y >= int(_Height)) continue;

            uint2 neighborCoord = uint2(neighborCoordSigned);
            if (_PreviousBuffer[neighborCoord].z < 0.5) continue;

            int distance = DistanceSquared(neighborCoord, currentCoord);
            if (distance < minDistance)
            {
                minDistance = distance;
                currentSeed = neighborCoord;
                found = true;
            }
        }

        // 遍历右边界
        for (int j = -radius + 1; j <= radius - 1; j++)
        {
            int2 neighborCoordSigned = int2(currentCoord) + int2(radius, j);
            if (neighborCoordSigned.x < 0 || neighborCoordSigned.x >= int(_Width) || neighborCoordSigned.y < 0 || neighborCoordSigned.y >= int(_Height)) continue;

            uint2 neighborCoord = uint2(neighborCoordSigned);
            if (_PreviousBuffer[neighborCoord].z < 0.5) continue;

            int distance = DistanceSquared(neighborCoord, currentCoord);
            if (distance < minDistance)
            {
                minDistance = distance;
                currentSeed = neighborCoord;
                found = true;
            }
        }
    }

    _CurrentBuffer[currentCoord] = float4(float(currentSeed.x) / _Width, float(currentSeed.y) / _Height, 1.0, 1.0);
}